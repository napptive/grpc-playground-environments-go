// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: playground-environments/entities.proto

package grpc_playground_environments_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _entities_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Environment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnvironmentId

	// no validation rules for AccountName

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on EnvironmentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentListResponseValidationError{
					field:  fmt.Sprintf("Environments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnvironmentListResponseValidationError is the validation error returned by
// EnvironmentListResponse.Validate if the designated constraints aren't met.
type EnvironmentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentListResponseValidationError) ErrorName() string {
	return "EnvironmentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentListResponseValidationError{}

// Validate checks the field values on ListEnvironmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEnvironmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountName

	// no validation rules for AccountId

	return nil
}

// ListEnvironmentsRequestValidationError is the validation error returned by
// ListEnvironmentsRequest.Validate if the designated constraints aren't met.
type ListEnvironmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentsRequestValidationError) ErrorName() string {
	return "ListEnvironmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentsRequestValidationError{}

// Validate checks the field values on EnvironmentQuota with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnvironmentQuota) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CpuQuota

	// no validation rules for UsedCpu

	// no validation rules for MemoryQuota

	// no validation rules for UsedMemory

	// no validation rules for StorageQuota

	// no validation rules for UsedStorage

	return nil
}

// EnvironmentQuotaValidationError is the validation error returned by
// EnvironmentQuota.Validate if the designated constraints aren't met.
type EnvironmentQuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentQuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentQuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentQuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentQuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentQuotaValidationError) ErrorName() string { return "EnvironmentQuotaValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentQuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentQuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentQuotaValidationError{}

// Validate checks the field values on EnvironmentQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentQuotaResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnvironmentId

	// no validation rules for AccountName

	// no validation rules for Name

	// no validation rules for Description

	if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentQuotaResponseValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EnvironmentQuotaResponseValidationError is the validation error returned by
// EnvironmentQuotaResponse.Validate if the designated constraints aren't met.
type EnvironmentQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentQuotaResponseValidationError) ErrorName() string {
	return "EnvironmentQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentQuotaResponseValidationError{}

// Validate checks the field values on EnvironmentSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentSelector) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	return nil
}

// EnvironmentSelectorValidationError is the validation error returned by
// EnvironmentSelector.Validate if the designated constraints aren't met.
type EnvironmentSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentSelectorValidationError) ErrorName() string {
	return "EnvironmentSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentSelectorValidationError{}

// Validate checks the field values on EnvironmentUser with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EnvironmentUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Role

	return nil
}

// EnvironmentUserValidationError is the validation error returned by
// EnvironmentUser.Validate if the designated constraints aren't met.
type EnvironmentUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentUserValidationError) ErrorName() string { return "EnvironmentUserValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentUserValidationError{}

// Validate checks the field values on EnvironmentInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentInfoResponseValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentInfoResponseValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentInfoResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EnvironmentInfoResponseValidationError is the validation error returned by
// EnvironmentInfoResponse.Validate if the designated constraints aren't met.
type EnvironmentInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentInfoResponseValidationError) ErrorName() string {
	return "EnvironmentInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentInfoResponseValidationError{}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: playground-environments/entities.proto

package grpc_playground_environments_go

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Environment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnvironmentMultiError, or
// nil if none found.
func (m *Environment) ValidateAll() error {
	return m.validate(true)
}

func (m *Environment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentId

	// no validation rules for AccountName

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreationTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnvironmentValidationError{
					field:  "CreationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnvironmentValidationError{
					field:  "CreationTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreationTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentValidationError{
				field:  "CreationTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedByUsername

	// no validation rules for ZoneName

	// no validation rules for OperationalState

	// no validation rules for OperationalStateName

	// no validation rules for StatusDetailMessage

	if len(errors) > 0 {
		return EnvironmentMultiError(errors)
	}
	return nil
}

// EnvironmentMultiError is an error wrapping multiple validation errors
// returned by Environment.ValidateAll() if the designated constraints aren't met.
type EnvironmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentMultiError) AllErrors() []error { return m }

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on EnvironmentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentListResponseMultiError, or nil if none found.
func (m *EnvironmentListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentListResponseValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentListResponseValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentListResponseValidationError{
					field:  fmt.Sprintf("Environments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EnvironmentListResponseMultiError(errors)
	}
	return nil
}

// EnvironmentListResponseMultiError is an error wrapping multiple validation
// errors returned by EnvironmentListResponse.ValidateAll() if the designated
// constraints aren't met.
type EnvironmentListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentListResponseMultiError) AllErrors() []error { return m }

// EnvironmentListResponseValidationError is the validation error returned by
// EnvironmentListResponse.Validate if the designated constraints aren't met.
type EnvironmentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentListResponseValidationError) ErrorName() string {
	return "EnvironmentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentListResponseValidationError{}

// Validate checks the field values on ListEnvironmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEnvironmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnvironmentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEnvironmentsRequestMultiError, or nil if none found.
func (m *ListEnvironmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnvironmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountName

	// no validation rules for AccountId

	if len(errors) > 0 {
		return ListEnvironmentsRequestMultiError(errors)
	}
	return nil
}

// ListEnvironmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListEnvironmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEnvironmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnvironmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnvironmentsRequestMultiError) AllErrors() []error { return m }

// ListEnvironmentsRequestValidationError is the validation error returned by
// ListEnvironmentsRequest.Validate if the designated constraints aren't met.
type ListEnvironmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentsRequestValidationError) ErrorName() string {
	return "ListEnvironmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentsRequestValidationError{}

// Validate checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Quota) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Quota with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in QuotaMultiError, or nil if none found.
func (m *Quota) ValidateAll() error {
	return m.validate(true)
}

func (m *Quota) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuQuota

	// no validation rules for UsedCpu

	// no validation rules for MemoryQuota

	// no validation rules for UsedMemory

	// no validation rules for StorageQuota

	// no validation rules for UsedStorage

	if len(errors) > 0 {
		return QuotaMultiError(errors)
	}
	return nil
}

// QuotaMultiError is an error wrapping multiple validation errors returned by
// Quota.ValidateAll() if the designated constraints aren't met.
type QuotaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuotaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuotaMultiError) AllErrors() []error { return m }

// QuotaValidationError is the validation error returned by Quota.Validate if
// the designated constraints aren't met.
type QuotaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaValidationError) ErrorName() string { return "QuotaValidationError" }

// Error satisfies the builtin error interface
func (e QuotaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuota.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaValidationError{}

// Validate checks the field values on EnvironmentQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentQuotaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentQuotaResponseMultiError, or nil if none found.
func (m *EnvironmentQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentId

	// no validation rules for AccountName

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnvironmentQuotaResponseValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnvironmentQuotaResponseValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentQuotaResponseValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EnvironmentQuotaResponseMultiError(errors)
	}
	return nil
}

// EnvironmentQuotaResponseMultiError is an error wrapping multiple validation
// errors returned by EnvironmentQuotaResponse.ValidateAll() if the designated
// constraints aren't met.
type EnvironmentQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentQuotaResponseMultiError) AllErrors() []error { return m }

// EnvironmentQuotaResponseValidationError is the validation error returned by
// EnvironmentQuotaResponse.Validate if the designated constraints aren't met.
type EnvironmentQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentQuotaResponseValidationError) ErrorName() string {
	return "EnvironmentQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentQuotaResponseValidationError{}

// Validate checks the field values on EnvironmentSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentSelectorMultiError, or nil if none found.
func (m *EnvironmentSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	if len(errors) > 0 {
		return EnvironmentSelectorMultiError(errors)
	}
	return nil
}

// EnvironmentSelectorMultiError is an error wrapping multiple validation
// errors returned by EnvironmentSelector.ValidateAll() if the designated
// constraints aren't met.
type EnvironmentSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentSelectorMultiError) AllErrors() []error { return m }

// EnvironmentSelectorValidationError is the validation error returned by
// EnvironmentSelector.Validate if the designated constraints aren't met.
type EnvironmentSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentSelectorValidationError) ErrorName() string {
	return "EnvironmentSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentSelectorValidationError{}

// Validate checks the field values on EnvironmentUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentUserMultiError, or nil if none found.
func (m *EnvironmentUser) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Role

	if len(errors) > 0 {
		return EnvironmentUserMultiError(errors)
	}
	return nil
}

// EnvironmentUserMultiError is an error wrapping multiple validation errors
// returned by EnvironmentUser.ValidateAll() if the designated constraints
// aren't met.
type EnvironmentUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentUserMultiError) AllErrors() []error { return m }

// EnvironmentUserValidationError is the validation error returned by
// EnvironmentUser.Validate if the designated constraints aren't met.
type EnvironmentUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentUserValidationError) ErrorName() string { return "EnvironmentUserValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentUserValidationError{}

// Validate checks the field values on EnvironmentInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnvironmentInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnvironmentInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnvironmentInfoResponseMultiError, or nil if none found.
func (m *EnvironmentInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnvironmentInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnvironmentInfoResponseValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnvironmentInfoResponseValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentInfoResponseValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuota()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnvironmentInfoResponseValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnvironmentInfoResponseValidationError{
					field:  "Quota",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuota()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnvironmentInfoResponseValidationError{
				field:  "Quota",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EnvironmentInfoResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EnvironmentInfoResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EnvironmentInfoResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for KubernetesVersion

	// no validation rules for OamVersion

	if len(errors) > 0 {
		return EnvironmentInfoResponseMultiError(errors)
	}
	return nil
}

// EnvironmentInfoResponseMultiError is an error wrapping multiple validation
// errors returned by EnvironmentInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type EnvironmentInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentInfoResponseMultiError) AllErrors() []error { return m }

// EnvironmentInfoResponseValidationError is the validation error returned by
// EnvironmentInfoResponse.Validate if the designated constraints aren't met.
type EnvironmentInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentInfoResponseValidationError) ErrorName() string {
	return "EnvironmentInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentInfoResponseValidationError{}

// Validate checks the field values on CreateEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnvironmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnvironmentRequestMultiError, or nil if none found.
func (m *CreateEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for Name

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for Description

	// no validation rules for SetAsDefaultEnvironment

	// no validation rules for Cpu

	// no validation rules for Ram

	// no validation rules for Storage

	// no validation rules for ZoneId

	// no validation rules for ZoneName

	if len(errors) > 0 {
		return CreateEnvironmentRequestMultiError(errors)
	}
	return nil
}

// CreateEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnvironmentRequestMultiError) AllErrors() []error { return m }

// CreateEnvironmentRequestValidationError is the validation error returned by
// CreateEnvironmentRequest.Validate if the designated constraints aren't met.
type CreateEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvironmentRequestValidationError) ErrorName() string {
	return "CreateEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvironmentRequestValidationError{}

// Validate checks the field values on DeleteEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvironmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvironmentRequestMultiError, or nil if none found.
func (m *DeleteEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentQualifiedName

	// no validation rules for AccountId

	// no validation rules for EnvironmentId

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteEnvironmentRequestMultiError(errors)
	}
	return nil
}

// DeleteEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvironmentRequestMultiError) AllErrors() []error { return m }

// DeleteEnvironmentRequestValidationError is the validation error returned by
// DeleteEnvironmentRequest.Validate if the designated constraints aren't met.
type DeleteEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentRequestValidationError) ErrorName() string {
	return "DeleteEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentRequestValidationError{}

// Validate checks the field values on KubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubeConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubeConfigResponseMultiError, or nil if none found.
func (m *KubeConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AssociatedServer

	// no validation rules for KubeConfigRaw

	if len(errors) > 0 {
		return KubeConfigResponseMultiError(errors)
	}
	return nil
}

// KubeConfigResponseMultiError is an error wrapping multiple validation errors
// returned by KubeConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type KubeConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeConfigResponseMultiError) AllErrors() []error { return m }

// KubeConfigResponseValidationError is the validation error returned by
// KubeConfigResponse.Validate if the designated constraints aren't met.
type KubeConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigResponseValidationError) ErrorName() string {
	return "KubeConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e KubeConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigResponseValidationError{}

// Validate checks the field values on KubeConfigTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubeConfigTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubeConfigTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubeConfigTokenResponseMultiError, or nil if none found.
func (m *KubeConfigTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *KubeConfigTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenRaw

	if len(errors) > 0 {
		return KubeConfigTokenResponseMultiError(errors)
	}
	return nil
}

// KubeConfigTokenResponseMultiError is an error wrapping multiple validation
// errors returned by KubeConfigTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type KubeConfigTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubeConfigTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubeConfigTokenResponseMultiError) AllErrors() []error { return m }

// KubeConfigTokenResponseValidationError is the validation error returned by
// KubeConfigTokenResponse.Validate if the designated constraints aren't met.
type KubeConfigTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubeConfigTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubeConfigTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubeConfigTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubeConfigTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubeConfigTokenResponseValidationError) ErrorName() string {
	return "KubeConfigTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e KubeConfigTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubeConfigTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubeConfigTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubeConfigTokenResponseValidationError{}

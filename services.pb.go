// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.15.2
// source: playground-environments/services.proto

package grpc_playground_environments_go

import (
	context "context"
	grpc_playground_common_go "github.com/napptive/grpc-playground-common-go"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_playground_environments_services_proto protoreflect.FileDescriptor

var file_playground_environments_services_proto_rawDesc = []byte{
	0x0a, 0x26, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x20, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf7, 0x07, 0x0a, 0x0c, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22,
	0x0c, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x82, 0x01, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x31, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x30, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x69,
	0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x03, 0x55, 0x73, 0x65, 0x12, 0x2c, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x20, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x75,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x22, 0x0e, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x67, 0x65, 0x74, 0x12, 0x78, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x76, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x42, 0x55, 0x5a, 0x53, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x61, 0x70, 0x70, 0x74, 0x69, 0x76, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2d, 0x67, 0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var file_playground_environments_services_proto_goTypes = []interface{}{
	(*ListEnvironmentsRequest)(nil),                 // 0: playground_environments.ListEnvironmentsRequest
	(*EnvironmentSelector)(nil),                     // 1: playground_environments.EnvironmentSelector
	(*CreateEnvironmentRequest)(nil),                // 2: playground_environments.CreateEnvironmentRequest
	(*DeleteEnvironmentRequest)(nil),                // 3: playground_environments.DeleteEnvironmentRequest
	(*grpc_playground_common_go.EmptyRequest)(nil),  // 4: playground_common.EmptyRequest
	(*EnvironmentListResponse)(nil),                 // 5: playground_environments.EnvironmentListResponse
	(*EnvironmentQuotaResponse)(nil),                // 6: playground_environments.EnvironmentQuotaResponse
	(*EnvironmentInfoResponse)(nil),                 // 7: playground_environments.EnvironmentInfoResponse
	(*grpc_playground_common_go.TokenResponse)(nil), // 8: playground_common.TokenResponse
	(*Environment)(nil),                             // 9: playground_environments.Environment
	(*grpc_playground_common_go.OpResponse)(nil),    // 10: playground_common.OpResponse
	(*KubeConfigResponse)(nil),                      // 11: playground_environments.KubeConfigResponse
	(*KubeConfigTokenResponse)(nil),                 // 12: playground_environments.KubeConfigTokenResponse
}
var file_playground_environments_services_proto_depIdxs = []int32{
	0,  // 0: playground_environments.Environments.List:input_type -> playground_environments.ListEnvironmentsRequest
	1,  // 1: playground_environments.Environments.Quota:input_type -> playground_environments.EnvironmentSelector
	1,  // 2: playground_environments.Environments.Info:input_type -> playground_environments.EnvironmentSelector
	1,  // 3: playground_environments.Environments.Use:input_type -> playground_environments.EnvironmentSelector
	2,  // 4: playground_environments.Environments.Create:input_type -> playground_environments.CreateEnvironmentRequest
	3,  // 5: playground_environments.Environments.Delete:input_type -> playground_environments.DeleteEnvironmentRequest
	4,  // 6: playground_environments.Environments.GetKubeConfig:input_type -> playground_common.EmptyRequest
	4,  // 7: playground_environments.Environments.GetToken:input_type -> playground_common.EmptyRequest
	5,  // 8: playground_environments.Environments.List:output_type -> playground_environments.EnvironmentListResponse
	6,  // 9: playground_environments.Environments.Quota:output_type -> playground_environments.EnvironmentQuotaResponse
	7,  // 10: playground_environments.Environments.Info:output_type -> playground_environments.EnvironmentInfoResponse
	8,  // 11: playground_environments.Environments.Use:output_type -> playground_common.TokenResponse
	9,  // 12: playground_environments.Environments.Create:output_type -> playground_environments.Environment
	10, // 13: playground_environments.Environments.Delete:output_type -> playground_common.OpResponse
	11, // 14: playground_environments.Environments.GetKubeConfig:output_type -> playground_environments.KubeConfigResponse
	12, // 15: playground_environments.Environments.GetToken:output_type -> playground_environments.KubeConfigTokenResponse
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_playground_environments_services_proto_init() }
func file_playground_environments_services_proto_init() {
	if File_playground_environments_services_proto != nil {
		return
	}
	file_playground_environments_entities_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_playground_environments_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_playground_environments_services_proto_goTypes,
		DependencyIndexes: file_playground_environments_services_proto_depIdxs,
	}.Build()
	File_playground_environments_services_proto = out.File
	file_playground_environments_services_proto_rawDesc = nil
	file_playground_environments_services_proto_goTypes = nil
	file_playground_environments_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnvironmentsClient is the client API for Environments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnvironmentsClient interface {
	// List returns all environments or the ones in the selected account.
	List(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error)
	// Quota returns usage and available capacity on a selected environment.
	Quota(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*EnvironmentQuotaResponse, error)
	// Info returns all information about a selected environment.
	Info(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*EnvironmentInfoResponse, error)
	// Use returns a new token for a selected environment. This operation returns a new
	// JWT that should be used when launching operations on a given environment.
	Use(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*grpc_playground_common_go.TokenResponse, error)
	// Create creates new environment
	Create(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error)
	// Remove deletes an environment
	Delete(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*grpc_playground_common_go.OpResponse, error)
	// GetKubeConfig returns the kubeconfig file required to connect to the underlying infrastructure.
	GetKubeConfig(ctx context.Context, in *grpc_playground_common_go.EmptyRequest, opts ...grpc.CallOption) (*KubeConfigResponse, error)
	// GetToken returns the user token required to connect to the underlying infrastructure.
	GetToken(ctx context.Context, in *grpc_playground_common_go.EmptyRequest, opts ...grpc.CallOption) (*KubeConfigTokenResponse, error)
}

type environmentsClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentsClient(cc grpc.ClientConnInterface) EnvironmentsClient {
	return &environmentsClient{cc}
}

func (c *environmentsClient) List(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (*EnvironmentListResponse, error) {
	out := new(EnvironmentListResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Quota(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*EnvironmentQuotaResponse, error) {
	out := new(EnvironmentQuotaResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/Quota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Info(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*EnvironmentInfoResponse, error) {
	out := new(EnvironmentInfoResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Use(ctx context.Context, in *EnvironmentSelector, opts ...grpc.CallOption) (*grpc_playground_common_go.TokenResponse, error) {
	out := new(grpc_playground_common_go.TokenResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/Use", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Create(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Delete(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*grpc_playground_common_go.OpResponse, error) {
	out := new(grpc_playground_common_go.OpResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) GetKubeConfig(ctx context.Context, in *grpc_playground_common_go.EmptyRequest, opts ...grpc.CallOption) (*KubeConfigResponse, error) {
	out := new(KubeConfigResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/GetKubeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) GetToken(ctx context.Context, in *grpc_playground_common_go.EmptyRequest, opts ...grpc.CallOption) (*KubeConfigTokenResponse, error) {
	out := new(KubeConfigTokenResponse)
	err := c.cc.Invoke(ctx, "/playground_environments.Environments/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentsServer is the server API for Environments service.
type EnvironmentsServer interface {
	// List returns all environments or the ones in the selected account.
	List(context.Context, *ListEnvironmentsRequest) (*EnvironmentListResponse, error)
	// Quota returns usage and available capacity on a selected environment.
	Quota(context.Context, *EnvironmentSelector) (*EnvironmentQuotaResponse, error)
	// Info returns all information about a selected environment.
	Info(context.Context, *EnvironmentSelector) (*EnvironmentInfoResponse, error)
	// Use returns a new token for a selected environment. This operation returns a new
	// JWT that should be used when launching operations on a given environment.
	Use(context.Context, *EnvironmentSelector) (*grpc_playground_common_go.TokenResponse, error)
	// Create creates new environment
	Create(context.Context, *CreateEnvironmentRequest) (*Environment, error)
	// Remove deletes an environment
	Delete(context.Context, *DeleteEnvironmentRequest) (*grpc_playground_common_go.OpResponse, error)
	// GetKubeConfig returns the kubeconfig file required to connect to the underlying infrastructure.
	GetKubeConfig(context.Context, *grpc_playground_common_go.EmptyRequest) (*KubeConfigResponse, error)
	// GetToken returns the user token required to connect to the underlying infrastructure.
	GetToken(context.Context, *grpc_playground_common_go.EmptyRequest) (*KubeConfigTokenResponse, error)
}

// UnimplementedEnvironmentsServer can be embedded to have forward compatible implementations.
type UnimplementedEnvironmentsServer struct {
}

func (*UnimplementedEnvironmentsServer) List(context.Context, *ListEnvironmentsRequest) (*EnvironmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedEnvironmentsServer) Quota(context.Context, *EnvironmentSelector) (*EnvironmentQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quota not implemented")
}
func (*UnimplementedEnvironmentsServer) Info(context.Context, *EnvironmentSelector) (*EnvironmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedEnvironmentsServer) Use(context.Context, *EnvironmentSelector) (*grpc_playground_common_go.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Use not implemented")
}
func (*UnimplementedEnvironmentsServer) Create(context.Context, *CreateEnvironmentRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedEnvironmentsServer) Delete(context.Context, *DeleteEnvironmentRequest) (*grpc_playground_common_go.OpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedEnvironmentsServer) GetKubeConfig(context.Context, *grpc_playground_common_go.EmptyRequest) (*KubeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKubeConfig not implemented")
}
func (*UnimplementedEnvironmentsServer) GetToken(context.Context, *grpc_playground_common_go.EmptyRequest) (*KubeConfigTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterEnvironmentsServer(s *grpc.Server, srv EnvironmentsServer) {
	s.RegisterService(&_Environments_serviceDesc, srv)
}

func _Environments_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).List(ctx, req.(*ListEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Quota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Quota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/Quota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Quota(ctx, req.(*EnvironmentSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Info(ctx, req.(*EnvironmentSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Use_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Use(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/Use",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Use(ctx, req.(*EnvironmentSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Create(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Delete(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_GetKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_playground_common_go.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).GetKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/GetKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).GetKubeConfig(ctx, req.(*grpc_playground_common_go.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_playground_common_go.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground_environments.Environments/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).GetToken(ctx, req.(*grpc_playground_common_go.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Environments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playground_environments.Environments",
	HandlerType: (*EnvironmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Environments_List_Handler,
		},
		{
			MethodName: "Quota",
			Handler:    _Environments_Quota_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Environments_Info_Handler,
		},
		{
			MethodName: "Use",
			Handler:    _Environments_Use_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Environments_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Environments_Delete_Handler,
		},
		{
			MethodName: "GetKubeConfig",
			Handler:    _Environments_GetKubeConfig_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Environments_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playground-environments/services.proto",
}

syntax = "proto3";

package playground_environments;
option go_package = "github.com/napptive/grpc-playground-environments-go;grpc_playground_environments_go";

import "google/protobuf/timestamp.proto";

// Environment defining a workspace for a user or group of users associated with an account.
message Environment{
    // EnvironmentId with the environment identifier.
    string environment_id = 1;
    // AccountName with the account name.
    string account_name = 2;
    // Name of the environment.
    string name = 3;
    // Description of the purpose of this environment.
    string description = 4;
    // CreationTime with the timestamp when the environment has been created.
    google.protobuf.Timestamp creation_time = 5;
    // CreatedByUsername with the username that created the environment.
    string created_by_username = 6;
}

// EnvironmentListResponse with a list of selected environments.
message EnvironmentListResponse{
    // Environments returned.
    repeated Environment environments = 1;
}

// ListEnvironmentsRequest with information about the target account if the list is intended
// to be limited to a single account. The current selected account as specified in the JWT
// will be used otherwise.
message ListEnvironmentsRequest{
    // AccountName restrict if present the returned environments to the given account. Cannot be
    // used in conjunction with AccountId.
    string account_name = 1;
    // AccountId restricts if present the returned environmetns to the given account. Cannot be 
    // used in conjunction with AccountName.
    string account_id = 2;
}

// Quota message containing quota information about a given environment.
message Quota{
    // CpuQuota with the maximum CPU quota available for the user in Kubernetes CPU units.
    float cpu_quota = 2;
    // UsedCpu with the number of Kubernetes CPU units used by the running user applications.
    float used_cpu = 3;
    // MemoryQuota with the maximum amount of memory available for the user in MB.
    float memory_quota = 4;
    // UsedMemory with the memory used in MB by the running user applications. 
    float used_memory = 5;
    // StorageQuota with the maximum amount of storage available for the user in in MB. 
    float storage_quota = 6;
    // UsedStorage with the storage used in MB by the running user applications.
    float used_storage = 7;
}

// EnvironmentQuotaResponse message containing quota information about a given environment.
message EnvironmentQuotaResponse{
    // EnvironmentId with the environment identifier.
    string environment_id = 1;
    // AccountName with the account name.
    string account_name = 2;
    // Name of the environment.
    string name = 3;
    // Description of the purpose of this environment.
    string description = 4;
    // Quota used and available on this environment.
    Quota quota = 5;
}

// EnvironmentSelector with information to determine the target environment. The current selected
// environment as specified in the JWT will be used otherwise.
// Keep in mind that we can select an environment through EnvironmentQualifiedName or
// through the combination of AccountId and EnvironmentId, being incompatible the use of the two selectors at
// the same time
message EnvironmentSelector{
    // EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as
    // <account_name>/<env_name>.
    string environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
}

// EnvironmentUser with the information of a user with access to a given environment.
message EnvironmentUser {
    // Username with the user login.
    string username = 1;
    // Email.
    string email = 2;
    // Role of the user in the environment.
    string role = 3;
}

// EnvironmentInfoResponse with complete information about an environment. Depending on the
// permission of the requesting user, some information may be omitted.
message EnvironmentInfoResponse{
    // Environment information.
    Environment environment = 1;
    // Quota information.
    Quota quota = 2;
    // Users with access to the environment.
    repeated EnvironmentUser users = 3;
    // KubernetesVersion indicating the underlying version of kubernetes where the applications are finally deployed onto.
    string kubernetes_version = 4;
    // OAMVersion with the version of the OAM standard supported by the platform.
    string oam_version = 5;
}

// CreateEnvironmentRequest is the message to request the creation of a new environment
message CreateEnvironmentRequest {
    // AccountId with the parent account identifier.
    string account_id = 1;
    // Name with the pretty name of the environment for user facing operations.
    string name = 2 ;
    // EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as
    // <account_name>/<env_name>.
    // EnvironmentCreation can be called by account_id and environment_name or by environment_qualified_name
    string environment_qualified_name = 3;
    // Description of the purpose of this environment.
    string description = 4;
    // PrimaryEnvironment flag to know which is the primary/default environment for an account.
    bool set_as_default_environment = 5;
    // Environment Quota requested
    // CPU in Kubernetes CPU units.
    float cpu = 6;
    // RAM in MB.
    float ram = 7;
    // EphemeralStorage in MB.
    float storage = 8;
}

// DeleteEnvironmentRequest is the message to request the deletion of an environment
message DeleteEnvironmentRequest {
    // EnvironmentQualifiedName (EnvQN) contains both the account name and the environment name as
    // <account_name>/<env_name>.
    string environment_qualified_name = 1;
    // AccountId with the account identifier.
    string account_id = 2;
    // EnvironmentId with the environment identifier
    string environment_id = 3;
    // Force is a flag to indicate that the environment is deleted even if it has applications deployed
    bool force = 4;
}